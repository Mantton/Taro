import std::cmp::Equatable
import std::clone::Clone
import std::default::Default
import std::hash::{Hashable, Hasher}

@foundation
public enum Option<Value> {
    case Some(Value)
    case None
}

extend<Value> Option<Value> {
    public func unwrap(&self) -> Value {}
    public func isSome(&self) -> bool {}
    public func isNone(&self) -> bool {}
}

extend<Value> Option<Value>: Equatable where Value: Equatable {}
extend<Value> Option<Value>: Clone where Value: Clone {
    func clone(&const self) -> Self {}
}
extend<Value> Option<Value>: Hashable where Value: Hashable {
    func hash<H: Hasher>(&const self, into: &H) {}
}

extend<Value> Option<Value>: Default {
    func default() -> Self {
        // Option::None
    }
}

public func unwrap<T>(value: Option<T>) -> T {}
